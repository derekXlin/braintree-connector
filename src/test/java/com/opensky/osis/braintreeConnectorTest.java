/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.opensky.osis;

import static org.mockito.Mockito.*;

import java.math.BigDecimal;

import org.junit.Before;
import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import org.mule.tck.AbstractMuleTestCase;
import org.mule.tck.FunctionalTestCase;
import org.mule.transport.NullPayload;

import com.braintreegateway.BraintreeGateway;
import com.braintreegateway.Result;
import com.braintreegateway.Transaction;
import com.braintreegateway.TransactionCloneRequest;
import com.braintreegateway.TransactionGateway;
import com.braintreegateway.TransactionOptionsCloneRequest;
import com.braintreegateway.TransactionRequest;

public class braintreeConnectorTest extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }
    
    @Before
    public void doSetUp() throws Exception
    {
        logger.info("Setting up tests");
        
        TransactionCloneRequest mockTCR = mock(TransactionCloneRequest.class);
        BraintreeRequestFactory mockRequestFactory = muleContext.getRegistry().get("requestFactory");
        when(mockRequestFactory.transactionCloneRequest()).thenReturn(mockTCR);
        when(mockTCR.amount(any(BigDecimal.class))).thenReturn(mockTCR);
        TransactionOptionsCloneRequest mockTOCR = mock(TransactionOptionsCloneRequest.class);
        when(mockTCR.options()).thenReturn(mockTOCR);
        when(mockTOCR.submitForSettlement(any(Boolean.class))).thenReturn(mockTOCR);
        when(mockTOCR.done()).thenReturn(mockTCR);
    }

    @Test
    public void testFlow() throws Exception
    {        
        BraintreeGateway mockGateway = muleContext.getRegistry().get("gateway");
        
        Result<Transaction> mockResult = mock(Result.class);
        when(mockResult.isSuccess()).thenReturn(true);
        Transaction mockTx = mock(Transaction.class);
        when(mockTx.getAmount()).thenReturn(new BigDecimal("17.5"));
        when(mockResult.getTransaction()).thenReturn(mockTx);
        
        TransactionGateway tg = mock(TransactionGateway.class);
        when(tg.cloneTransaction(anyString(), any(TransactionCloneRequest.class))).thenReturn(mockResult);
        when(mockGateway.transaction()).thenReturn(tg);
        
        
        
        runFlowAndExpect("testFlow", mockResult);
    }

    @Test
    public void testFlowRefund() throws Exception
    {        
        BraintreeGateway mockGateway = muleContext.getRegistry().get("gateway");
        
        Result<Transaction> mockResult = mock(Result.class);
        when(mockResult.isSuccess()).thenReturn(true);
        Transaction mockTx = mock(Transaction.class);
        when(mockTx.getAmount()).thenReturn(new BigDecimal("17.5"));
        when(mockResult.getTransaction()).thenReturn(mockTx);
        
        TransactionGateway tg = mock(TransactionGateway.class);
        when(tg.refund(anyString(), any(BigDecimal.class))).thenReturn(mockResult);
        when(mockGateway.transaction()).thenReturn(tg);
        
        runFlowAndExpect("testFlowRefund", mockResult);
        
        verify(tg).refund("123",new BigDecimal("7.5"));
    }

    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
